import logging
import string

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ParseMode, ContentType
from aiogram.dispatcher import FSMContext, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hcode
from config import token, sql, ping_templates, available_groups
from defs import cancel_state, transform_into_user_groups, get_name_and_nickname
from keyboards import groups_markup, menu_markup
logging.basicConfig(level=logging.DEBUG)
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())


class Ping(StatesGroup):
    selecting = State()
    writing = State()


class Nickname(StatesGroup):
    setnick = State()


class Group(StatesGroup):
    setgroup = State()


@dp.message_handler(commands='start', state='*')
async def start_message(message: Message, state: FSMContext):
    await cancel_state(state)
    await sql.add_user(user_id=message.from_user.id, username=message.from_user.username,
                       user_name=message.from_user.first_name, user_surname=message.from_user.last_name)
    await message.answer_sticker('CAACAgIAAxkBAAEcFGJjxZDZ2jGLg3QHetNgksZBBnha8QACSQEAAntOKhDSitDV6aV93y0E', reply_markup=await menu_markup())


@dp.message_handler(commands='cancel', state='*')
async def cancel(message: Message, state: FSMContext):
    await cancel_state(state)
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')


@dp.message_handler(commands='nickname', state='*')
async def set_nickname(message: Message, state: FSMContext):
    await cancel_state(state)
    old_nick = await sql.get_data(message.from_user.id, 'nickname')
    markup = InlineKeyboardMarkup()
    cancel_button = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    set_to_none_button = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='remove_nickname')
    markup.row(cancel_button)
    if await sql.get_data(message.from_user.id, 'nickname') is not None:
        markup.row(set_to_none_button)
    await message.answer(
        text=f"""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫: \n{f"–¢–µ–∫—É—â–∏–π: '{hcode(old_nick)}'" if old_nick is not None else ''}""",
        reply_markup=markup, parse_mode=ParseMode.HTML)
    await state.update_data(old_nick=old_nick)
    await Nickname.setnick.set()


@dp.message_handler(commands=['ping'], state='*')
async def ping(message: Message, state: FSMContext):
    await cancel_state(state)
    markup = InlineKeyboardMarkup()
    groups = await sql.get_all('gay_groups')
    lines = []
    for group in groups:
        if (len(group[1]) < 1) or (len(group[1]) == 1 and message.from_user.id in group[1]):
            continue
        button = InlineKeyboardButton(string.capwords(group[0]), callback_data=group[0])
        markup.row(button)
        line = f"""<u>{string.capwords(group[0])}</u>:  """
        for user in group[1]:
            if user == message.from_user.id:
                continue
            line = line + f'{await get_name_and_nickname(user)}, '
        line = line[:-2] + '\n'
        lines.append(line)
    await message.answer(text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö:</b>\n' + '\n'.join(lines) + '\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∏–Ω–≥–∞:</b>', reply_markup=markup, parse_mode=ParseMode.HTML)
    await Ping.selecting.set()


@dp.message_handler(commands=['group'], state='*')
async def group(message: Message, state: FSMContext):
    await cancel_state(state)
    await message.answer('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: ', reply_markup=await groups_markup(message.from_user.id))
    await Group.setgroup.set()


@dp.message_handler(state=Nickname.setnick)
async def state_Nickname_setnick(message: Message, state: FSMContext):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫‚ò¢Ô∏è':
        await set_nickname(message, state)
        return
    elif message.text == '–ü–∏–Ω–≥ | –°–æ–∑—ã–≤‚òéÔ∏è':
        await ping(message, state)
        return
    elif message.text == '–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ãüë®‚Äçüë®‚Äçüëß‚Äçüë¶':
        await group(message, state)
        return
    if len(message.text) > 18:
        await message.answer(f'–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 18 —Å–∏–º–≤–æ–ª–æ–≤! –£ –≤–∞—Å --> {len(message.text)}')
        return
    data = await state.get_data()
    old_nick = data['old_nick']
    await sql.update_data(message.from_user.id, 'nickname', message.text)
    await message.answer(f"""–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å '{hcode(old_nick) if old_nick is not None else ''}' –Ω–∞ '{hcode(message.text)}'\n–¢–µ–ø–µ—Ä—å –≤—ã: {await get_name_and_nickname(message.from_user.id)}""",
                         parse_mode=ParseMode.HTML)
    await state.finish()


@dp.callback_query_handler(state=Group.setgroup)
async def state_Group_setgroup(call: CallbackQuery):
    users_in_group = await sql.get_group_users(call.data)
    if call.from_user.id in users_in_group:
        await sql.remove_user_from_group(call.data, call.from_user.id)
    elif call.from_user.id not in users_in_group:
        await sql.add_user_to_group(call.data, call.from_user.id)
    await call.message.edit_reply_markup(await groups_markup(call.from_user.id))


@dp.callback_query_handler(state=Ping.selecting)
async def state_Ping_selecting(call: CallbackQuery, state: FSMContext):
    receiver_group = call.data
    await state.update_data(receiver_group=receiver_group)
    await state.update_data(sender=call.from_user.id)
    markup = InlineKeyboardMarkup()
    for template in ping_templates:
        markup.row(InlineKeyboardButton(template, callback_data=template))
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—à–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <i>'{string.capwords(receiver_group)}'</i> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ <b>–Ω–∏–∂–µ</b>:", reply_markup=markup, parse_mode=ParseMode.HTML)
    await Ping.writing.set()


@dp.callback_query_handler(state=Ping.writing)
async def state_Ping_writing_call(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    receiver_group = data['receiver_group']
    receiver_group_users = await sql.get_group_users(receiver_group)
    sender = data['sender']
    for receiver_user in receiver_group_users:
        if receiver_user == call.from_user.id:
            continue
        await bot.send_message(receiver_user, call.data)
        await bot.send_message(receiver_user,
                               f'<i>{string.capwords(receiver_group)}</i>. –í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {await get_name_and_nickname(sender)}',
                               parse_mode=ParseMode.HTML, disable_notification=True)
    await call.message.answer(
        f'''–ü–æ–≤–µ—Å—Ç–∫–∞: '<code>{call.data}</code>' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–µ '<i>{string.capwords(receiver_group)}</i>' ''',
        parse_mode=ParseMode.HTML, disable_notification=True)
    await state.finish()


@dp.message_handler(state=Ping.writing, content_types=ContentType.ANY)
async def state_Ping_writing_message(message: Message, state: FSMContext):
    data = await state.get_data()
    receiver_group = data['receiver_group']
    receiver_group_users = await sql.get_group_users(receiver_group)
    sender = data['sender']
    for receiver_user in receiver_group_users:
        if receiver_user == message.from_user.id:
            continue
        await message.copy_to(receiver_user)
        await bot.send_message(receiver_user,
                               f'<i>{string.capwords(receiver_group)}</i>. –í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {await get_name_and_nickname(sender)}',
                               parse_mode=ParseMode.HTML, disable_notification=True)
    await message.answer(
        f'''–ü–æ–≤–µ—Å—Ç–∫–∞: '<code>{message.text}</code>' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–µ '<i>{string.capwords(receiver_group)}</i>' ''',
        parse_mode=ParseMode.HTML, disable_notification=True)
    await state.finish()


@dp.callback_query_handler(state='*')
async def callback(call: CallbackQuery, state: FSMContext):
    if call.data == 'cancel':
        if await state.get_state() is not None:
            await state.finish()
            await call.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
    elif call.data == 'remove_nickname':
        await sql.update_non_text_data(call.from_user.id, 'nickname', 'NULL')
        await call.message.answer('–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')


@dp.message_handler(state='*')
async def other_messages(message: Message, state: FSMContext):
    low = message.text.lower()
    # * Menu
    if '–ø–∏–Ω–≥' in low:
        await ping(message, state)
    elif '–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã' in low:
        await group(message, state)
    elif '–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫' in low:
        await set_nickname(message, state)
    # * bad words
    elif low == '—Ö—É–π':
        await message.answer('—É —Ç–µ–±—è –µ–≥–æ –Ω–µ—Ç —Ö–∞—Ö–∞—Ö–∞—Ö—Ö–∞–ø—Ö(–Ω–µ —Å–º–µ—à–Ω–æ)')
    elif '–Ω–∞—Ö—É–π' in low:
        await message.answer_sticker('–∫—É—Å–∞–π')
    elif '–∞–Ω–¥—Ä–µ' in low:
        await message.answer('–±—ã–ª–æ –¥–µ–ª–æ..')
    elif '—á–º–æ' in low:
        await message.answer('–æ—Ç–∫—Ä–æ–π –∫–∞–º–µ—Ä—É, –ø–µ—Ä–µ–∫–ª—é—á–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—É—é –∏ —É–≤–∏–¥–∏—à—å –µ–≥–æ')
    elif '–¥–∞—É–Ω' in low:
        await message.answer('—Ç—ã - —Å–æ–ª–Ω–µ—á–Ω—ã–π –º–∞–ª—å—á–∏–∫üåû')
    elif '–Ω–∞—Ö—É—è' in low:
        await message.answer('–±–ª—è —è —Å–∞–º —Ö–∑, –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ –ø—Ä–æ—Å—Ç–æ')
    elif '–∫–æ–Ω—á' in low:
        await message.answer(
            '*–ö–æ–Ω—á* - —ç—Ç–æ –±–µ–∑–Ω–∞–¥—ë–∂–Ω—ã–π, –Ω–µ–∏—Å–ø—Ä–∞–≤–∏–º—ã–π, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç —Å–µ–±—è –±–µ–∑–Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–¥–æ—Å—Ç–æ–π–Ω–æ.',
            parse_mode='Markdown')
    elif '—à–ª—é—Ö–∞' in low:
        await message.answer('—Ç–≤–æ—è –º–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞—Ç—å. –ø—Ä–æ –º–∞—Ç—å –±—ã–ª–æ –ª–∏—à–Ω–µ–µ')
    elif '—Ç–≤–∞—Ä—å' in low:
        await message.answer('–≥–¥–µ')
    elif '–ø–æ—à–µ–ª' in low:
        await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã')
    elif '–≥–Ω–∏–¥–∞' in low:
        await message.answer('—Ç–≤–æ–π –±—É—Ö–∞—é—â–∏–π –æ—Ç–µ—Ü')
    elif '—Ö—É–∏–ª–∞' in low:
        await message.answer('–∂–æ—Å–∫–∞')
    elif '–±–ª—è—Ç—å' in low:
        await message.answer('–∫—Ç–æ, —Ç—ã?')
    elif '–¥–∞' in low:
        await message.answer('–ø–∏–∑–¥–∞')
    # 300
    elif low == '300' or low == '—Ç—Ä–∏—Å—Ç–∞':
        await message.answer('–æ—Ç—Å–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞')
    elif '—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–æ–º –±—É–¥—É —è' and '–æ—Ç—Å–æ—Å' and '—Ç—ã —É –º–µ–Ω—è' in low:
        await message.answer('—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–æ–º —Ç—ã –Ω–µ –±—É–¥–µ—à—å, –æ—Ç—Å–æ—Å–∏ –∏ –±—É–¥—å —Å–≤–æ–±–æ–¥–µ–Ω')
    elif '–≥–æ–¥–µ–Ω —è' and '—Å–æ–º–Ω–µ–Ω–∏–π –Ω–µ—Ç' and '–ª—É—á—à–µ —Å–¥–µ–ª–∞–π –º–Ω–µ –º–∏–Ω–µ—Ç' in low:
        await message.answer('–∞ —Å–æ–º–Ω–µ–Ω–∏—è –µ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ –Ω—é—Ö–∞–π 3 —Ö—É—è')
    elif '–∏–∑–≤–∏–Ω–∏' and '—Å–ø–∏–Ω–∞ –Ω–µ' and '–æ—Ç—Å–æ—Å–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è' in low:
        await message.answer('–º–æ–∂–µ—à—å —Å—Ç–æ—è –æ—Ç—Å–æ—Å–∞—Ç—å, —è –Ω–µ –±—É–¥—É –≤–æ–∑—Ä–∞–∂–∞—Ç—å')
    # 3
    elif low == '3':
        await message.answer('–∂–æ–ø—É –ø–æ–¥–æ—Ç—Ä–∏')
    # –ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç
    elif low == '–Ω–µ—Ç':
        await message.answer('–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç')
    elif low == '—à–ª—é—Ö–∏ –∞—Ä–≥—É–º–µ–Ω—Ç':
        await message.answer('–∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω, –ø–∏–¥–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
    elif '–ø–∏–¥–æ—Ä' and '–∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω' and '—Ç–≤–æ–π' and '–∞–Ω–∞–ª' and '–Ω–µ' and '–≤–µ—á–µ–Ω' in low:
        await message.answer('–∞–Ω–∞–ª –º–æ–π –≤–µ—á–µ–Ω, —Ç–≤–æ–π –∞–Ω–∞–ª –ø–æ–º–µ—á–µ–Ω')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
